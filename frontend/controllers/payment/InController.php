<?php

namespace frontend\controllers\payment;

use common\components\vk\Exception\CouldNotSaveException;
use common\components\vk\Exception\TransactionAlreadyExistsException;
use common\components\vk\VkCoinClient;
use common\models\transaction\Transaction;
use common\models\user\billing\Exception\CouldNotSavePaymentAccountBalanceException;
use common\models\user\billing\Exception\CurrencyNotFound;
use common\models\user\billing\Exception\WrongMerchantException;
use common\models\user\billing\PaymentAccountManager;
use common\models\user\Exception\UserNotFoundException;
use yii\db\Exception;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\web\ServerErrorHttpException;

class InController extends Controller
{
    public function behaviors()
    {
        return ArrayHelper::merge([
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['index','check-transaction'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ]
        ], parent::behaviors()); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionCheckTransaction(string $tx)
    {
        try {
            $response = (new PaymentAccountManager(\Yii::$app->user->getId()))->upBalanceFromTransaction($tx);
        } catch (UserNotFoundException | CurrencyNotFound $e) {
            throw new NotFoundHttpException();
        } catch (WrongMerchantException | TransactionAlreadyExistsException $e) {
            throw new BadRequestHttpException();
        } catch (Exception $e) {
            throw new ServerErrorHttpException();
        }

        dump($response);exit();
    }
}